"use strict";

exports.__esModule = true;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _memoryFs = _interopRequireDefault(require("memory-fs"));

var _proxyFileSystem = _interopRequireDefault(require("./proxyFileSystem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VirtualModulePlugin =
/*#__PURE__*/
function () {
  /**
   * Apply an instance of the plugin to compilation.
   * helpful for adding the plugin inside a loader.
   */
  VirtualModulePlugin.bootstrap = function bootstrap(compilation, files) {
    var compiler = compilation.compiler;
    var plugin = new VirtualModulePlugin(files);
    plugin.augmentCompilerFileSystem(compiler);
    compilation.inputFileSystem = compiler.inputFileSystem;
    return plugin;
  };

  function VirtualModulePlugin(files) {
    var _this = this;

    Object.defineProperty(this, "addFile", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(virtualPath, content) {
        _this.fs.mkdirpSync(_path.default.dirname(virtualPath));

        _this.fs.writeFileSync(virtualPath, content);
      }
    });
    this.fs = new _memoryFs.default();

    if (files) {
      Object.keys(files).forEach(function (key) {
        _this.addFile(key, files[key]);
      });
    }
  }

  var _proto = VirtualModulePlugin.prototype;

  _proto.augmentCompilerFileSystem = function augmentCompilerFileSystem(compiler) {
    if (this.augmented === true) {
      return;
    }

    var fs = (0, _proxyFileSystem.default)(compiler.inputFileSystem, this.fs);
    compiler.inputFileSystem = fs;
    compiler.resolvers.normal.fileSystem = fs;
    compiler.resolvers.context.fileSystem = fs;
    compiler.resolvers.loader.fileSystem = fs;
    this.augmented = true;
  };

  _proto.apply = function apply(compiler) {
    var _this2 = this;

    // if the fs is already present then immediately augment it
    if (compiler.inputFileSystem) {
      this.augmentCompilerFileSystem(compiler);
    }

    compiler.plugin('compile', function () {
      _this2.augmentCompilerFileSystem(compiler);
    }); // Augment the loader context so that loaders can neatly
    // extract source strings to virtual files.

    compiler.plugin('compilation', function (compilation) {
      compilation.plugin('normal-module-loader', function (loaderContext) {
        loaderContext.emitVirtualFile = _this2.addFile;
      });
    });
  };

  return VirtualModulePlugin;
}();

var _default = VirtualModulePlugin;
exports.default = _default;